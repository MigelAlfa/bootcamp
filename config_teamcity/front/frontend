

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.notifications
import jetbrains.buildServer.configs.kotlin.buildFeatures.vcsLabeling
import jetbrains.buildServer.configs.kotlin.buildSteps.SSHUpload
import jetbrains.buildServer.configs.kotlin.buildSteps.dockerCommand
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.buildSteps.sshExec
import jetbrains.buildServer.configs.kotlin.buildSteps.sshUpload
import jetbrains.buildServer.configs.kotlin.projectFeatures.dockerRegistry
import jetbrains.buildServer.configs.kotlin.triggers.finishBuildTrigger
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.vcs.GitVcsRoot

/*
The settings script is an entry point for defining a TeamCity
project hierarchy. The script should contain a single call to the
project() function with a Project instance or an init function as
an argument.
VcsRoots, BuildTypes, Templates, and subprojects can be
registered inside the project using the vcsRoot(), buildType(),
template(), and subProject() methods respectively.
To debug settings scripts in command-line, run the
    mvnDebug org.jetbrains.teamcity:teamcity-configs-maven-plugin:generate
command and attach your debugger to the port 8000.
To debug in IntelliJ Idea, open the 'Maven Projects' tool window (View
-> Tool Windows -> Maven Projects), find the generate task node
(Plugins -> teamcity-configs -> teamcity-configs:generate), the
'Debug' option is available in the context menu for the task.
*/

version = "2022.10"

project {
    description = "Project for frontend"

    vcsRoot(BootcampFrontend)

    buildType(BuildAndPackage)
    buildType(DeployToDevEnvironment)
    buildType(DeployToQaEnvironment)

    features {
        dockerRegistry {
            id = "PROJECT_EXT_2"
            name = "Docker Registry"
            url = "https://jfrog.it-academy.by"
            userName = "igorsha"
            password = "credentialsJSON:82c61b50-e1ae-42ef-8901-9a3910e502d5"
        }
    }
}

object BuildAndPackage : BuildType({
    name = "Build and Package"

    artifactRules = "front.latest.image.version"
    publishArtifacts = PublishMode.SUCCESSFUL

    vcs {
        root(BootcampFrontend)

        cleanCheckout = true
    }

    steps {
        script {
            name = "set variables for the tag"
            scriptContent = """
                export current_build_date_format="+%%Y%%m%%d"
                export current_build_date="${'$'}(date ${'$'}current_build_date_format)"
                GIT_HASH=%build.vcs.number%
                GIT_HASH_SHORT="${'$'}(echo ${'$'}GIT_HASH | cut -c1-6)"
                echo "##teamcity[buildNumber '${'$'}current_build_date.${'$'}GIT_HASH_SHORT']"
            """.trimIndent()
            param("org.jfrog.artifactory.selectedDeployableServer.downloadSpecSource", "Job configuration")
            param("org.jfrog.artifactory.selectedDeployableServer.useSpecs", "false")
            param("org.jfrog.artifactory.selectedDeployableServer.uploadSpecSource", "Job configuration")
        }
        script {
            name = "create nginx.conf"
            enabled = false
            scriptContent = """
                #cat <<-SCRIPT > nginx.conf
                #server {
                #  listen 80;
                
                #  location / {
                #    root /usr/share/nginx/html/;
                #    include /etc/nginx/mime.types;
                #    try_files \${'$'}uri \${'$'}uri/ /index.html;
                #  }
                #}
                #SCRIPT
                
                #cat <<-SCRIPT > env.sh
                ##!/bin/bash
                
                # Recreate config file
                #rm -rf ./env-config.js
                #touch ./env-config.js
                
                # Add assignment 
                #echo "window._env_ = {" >> ./env-config.js
                
                # Read each line in .env file
                # Each line represents key=value pairs
                #while read -r line || [[ -n "${'$'}line" ]];
                #do
                #  # Split env variables by character `=`
                #  if printf '%s\n' "${'$'}line" | grep -q -e '='; then
                #    varname=${'$'}(printf '%s\n' "${'$'}line" | sed -e 's/=.*//')
                #    varvalue=${'$'}(printf '%s\n' "${'$'}line" | sed -e 's/^[^=]*=//')
                #  fi
                
                #  # Read value of current variable if exists as Environment variable
                #  value=${'$'}(printf '%s\n' "${'$'}{!varname}")
                #  # Otherwise use value from .env file
                #  [[ -z ${'$'}value ]] && value=${'$'}{varvalue}
                  
                #  # Append configuration property to JS file
                #  echo "  ${'$'}varname: \"${'$'}value\"," >> ./env-config.js
                #done < .env
                
                #echo "}" >> ./env-config.js
                #SCRIPT
                chmod 777 env.sh
            """.trimIndent()
            param("org.jfrog.artifactory.selectedDeployableServer.downloadSpecSource", "Job configuration")
            param("org.jfrog.artifactory.selectedDeployableServer.useSpecs", "false")
            param("org.jfrog.artifactory.selectedDeployableServer.uploadSpecSource", "Job configuration")
        }
        dockerCommand {
            name = "Build the Docker container"
            commandType = build {
                source = content {
                    content = """
                        #FROM node:19-slim as builder
                        #WORKDIR /app
                        #COPY package.json .
                        #RUN npm install
                        #COPY . .
                        #RUN npm run build 
                        
                        ###EXPOSE 9000
                        ###CMD [ "node", "index.js" ]
                        ###ENTRYPOINT ["npm", "run", "serve"]
                        
                        ###Stage2
                        ############################################################
                        
                        #FROM nginx:1.23.2
                        ### Set working directory to nginx resources directory
                        #WORKDIR /usr/share/nginx/html
                        ### Remove default nginx static resources
                        #RUN rm -rf ./*
                        #COPY --from=builder /app/dist .
                        #COPY nginx.conf /etc/nginx/conf.d/default.conf
                        #EXPOSE 80
                        #ENTRYPOINT ["nginx", "-g", "daemon off;"]
                        
                        ##################Without NGINX#########################################################
                        FROM node:19-slim as builder
                        WORKDIR /app
                        COPY package.json .
                        RUN npm install --force
                        COPY . .
                        EXPOSE 9000
                        ENTRYPOINT ["npm", "run", "serve"]
                        
                        #########################################################################################
                        #FROM node:19-slim as builder
                        #WORKDIR /app
                        #COPY package.json .
                        #RUN npm install
                        #COPY . .
                        #RUN npm run build 
                        
                        #FROM nginx:1.23.2
                        #WORKDIR /usr/share/nginx/html
                        #RUN rm -rf ./*
                        #COPY --from=builder /app/dist .
                        #COPY nginx.conf /etc/nginx/conf.d/default.conf
                        #EXPOSE 80
                        #USER root
                        #COPY ./env.sh .
                        #COPY .env .
                        #RUN chmod +x env.sh
                        #CMD ["/bin/bash", "-c", "/usr/share/nginx/html/env.sh && nginx -g \"daemon off;\""]
                    """.trimIndent()
                }
                namesAndTags = """
                    jfrog.it-academy.by/itbc-devops-test/front-nginx:%env.BUILD_NUMBER%
                    jfrog.it-academy.by/itbc-devops-test/front-nginx:latest
                """.trimIndent()
            }
        }
        step {
            name = "Push a container to jfrog"
            type = "ArtifactoryDocker"
            param("org.jfrog.artifactory.selectedDeployableServer.deployReleaseText", "/itbc-devops-test")
            param("org.jfrog.artifactory.selectedDeployableServer.dockerImageName", "jfrog.it-academy.by/itbc-devops-test/front-nginx:%env.BUILD_NUMBER%")
            param("org.jfrog.artifactory.selectedDeployableServer.dockerCommand", "PUSH")
            param("org.jfrog.artifactory.selectedDeployableServer.urlId", "0")
            param("org.jfrog.artifactory.selectedDeployableServer.envVarsExcludePatterns", "*password*,*secret*")
            param("org.jfrog.artifactory.selectedDeployableServer.resolvingRepo", "helm-virtual")
            param("org.jfrog.artifactory.selectedDeployableServer.targetRepo", "itbc-devops-test")
        }
        step {
            name = "Push a container:latest to jfrog"
            type = "ArtifactoryDocker"
            param("org.jfrog.artifactory.selectedDeployableServer.deployReleaseText", "/itbc-devops-test")
            param("org.jfrog.artifactory.selectedDeployableServer.dockerImageName", "jfrog.it-academy.by/itbc-devops-test/front-nginx:latest")
            param("org.jfrog.artifactory.selectedDeployableServer.dockerCommand", "PUSH")
            param("org.jfrog.artifactory.selectedDeployableServer.urlId", "0")
            param("org.jfrog.artifactory.selectedDeployableServer.envVarsExcludePatterns", "*password*,*secret*")
            param("org.jfrog.artifactory.selectedDeployableServer.resolvingRepo", "helm-virtual")
            param("org.jfrog.artifactory.selectedDeployableServer.targetRepo", "itbc-devops-test")
        }
        script {
            name = "Save image version"
            scriptContent = "echo %env.BUILD_NUMBER% > front.latest.image.version"
            param("org.jfrog.artifactory.selectedDeployableServer.downloadSpecSource", "Job configuration")
            param("org.jfrog.artifactory.selectedDeployableServer.useSpecs", "false")
            param("org.jfrog.artifactory.selectedDeployableServer.uploadSpecSource", "Job configuration")
        }
    }

    triggers {
        vcs {
            branchFilter = "+:refs/heads/develop"
        }
    }

    features {
        notifications {
            notifierSettings = slackNotifier {
                connection = "PROJECT_EXT_3"
                sendTo = "#profiler2022"
                messageFormat = verboseMessageFormat {
                    addBranch = true
                    addChanges = true
                    addStatusText = true
                    maximumNumberOfChanges = 10
                }
            }
            buildStarted = true
            buildFailedToStart = true
            buildFailed = true
            buildFinishedSuccessfully = true
            firstBuildErrorOccurs = true
            buildProbablyHanging = true
            queuedBuildRequiresApproval = true
        }
        vcsLabeling {
            vcsRootId = "${BootcampFrontend.id}"
            labelingPattern = "v.%build.number%"
            successfulOnly = true
        }
    }
})

object DeployToDevEnvironment : BuildType({
    name = "Deploy to Dev environment"

    steps {
        sshExec {
            name = "Docker run"
            commands = """
                docker kill frontend
                docker rm frontend
                docker rmi jfrog.it-academy.by/itbc-devops-test/front-nginx:latest
                docker run -d -p 80:9000 -e API_URL=http://192.168.205.10:8080 --name frontend jfrog.it-academy.by/itbc-devops-test/front-nginx:latest
                #docker run -d -p 80:80 --name frontend jfrog.it-academy.by/itbc-devops-test/front-nginx:latest
            """.trimIndent()
            targetUrl = "192.168.205.10"
            authMethod = password {
                username = "user"
                password = "credentialsJSON:3e12d360-0f6a-43b8-b4c6-a773c4d20a9a"
            }
        }
        sshExec {
            name = "Сheck if a docker instance is running"
            commands = """
                #!/bin/bash
                sleep 15s
                
                if docker ps | grep -q frontend
                then 
                    echo "Running!"
                else
                    echo "Not Running!"
                    exit 1
                fi
            """.trimIndent()
            targetUrl = "192.168.205.10"
            authMethod = password {
                username = "user"
                password = "credentialsJSON:3e12d360-0f6a-43b8-b4c6-a773c4d20a9a"
            }
        }
    }

    triggers {
        finishBuildTrigger {
            buildType = "${BuildAndPackage.id}"
            successfulOnly = true
            branchFilter = ""
        }
    }

    features {
        notifications {
            notifierSettings = slackNotifier {
                connection = "PROJECT_EXT_3"
                sendTo = "#profiler2022"
                messageFormat = verboseMessageFormat {
                    addStatusText = true
                    maximumNumberOfChanges = 10
                }
            }
            buildStarted = true
            buildFailedToStart = true
            buildFailed = true
            buildFinishedSuccessfully = true
            firstBuildErrorOccurs = true
            buildProbablyHanging = true
            queuedBuildRequiresApproval = true
        }
    }

    dependencies {
        snapshot(BuildAndPackage) {
            onDependencyFailure = FailureAction.CANCEL
            onDependencyCancel = FailureAction.CANCEL
        }
    }
})

object DeployToQaEnvironment : BuildType({
    name = "Deploy to QA environment"

    artifactRules = "front.image.version.inQA"
    publishArtifacts = PublishMode.SUCCESSFUL

    steps {
        sshUpload {
            name = "Copy file to remote server"
            transportProtocol = SSHUpload.TransportProtocol.SCP
            sourcePath = "front.latest.image.version"
            targetUrl = "192.168.205.11"
            authMethod = password {
                username = "user"
                password = "credentialsJSON:3e12d360-0f6a-43b8-b4c6-a773c4d20a9a"
            }
        }
        sshExec {
            name = "Docker run"
            commands = """
                docker kill frontend
                docker rmi jfrog.it-academy.by/itbc-devops-test/front-nginx:latest
                version_to_deploy_front=${'$'}(cat front.latest.image.version)
                docker run --rm -d -p 80:9000 -e API_URL=http://192.168.205.11:8080 --name frontend jfrog.it-academy.by/itbc-devops-test/front-nginx:${'$'}{version_to_deploy_front}
            """.trimIndent()
            targetUrl = "192.168.205.11"
            authMethod = password {
                username = "user"
                password = "credentialsJSON:3e12d360-0f6a-43b8-b4c6-a773c4d20a9a"
            }
        }
        script {
            name = "Save image version"
            scriptContent = "cat front.latest.image.version > front.image.version.inQA"
            param("org.jfrog.artifactory.selectedDeployableServer.downloadSpecSource", "Job configuration")
            param("org.jfrog.artifactory.selectedDeployableServer.useSpecs", "false")
            param("org.jfrog.artifactory.selectedDeployableServer.uploadSpecSource", "Job configuration")
        }
        sshExec {
            name = "Сheck if a docker instance is running"
            commands = """
                #!/bin/bash
                sleep 15s
                
                if docker ps | grep -q frontend
                then 
                    echo "Running!"
                else
                    echo "Not Running!"
                    exit 1
                fi
            """.trimIndent()
            targetUrl = "192.168.205.11"
            authMethod = password {
                username = "user"
                password = "credentialsJSON:3e12d360-0f6a-43b8-b4c6-a773c4d20a9a"
            }
        }
    }

    features {
        notifications {
            notifierSettings = slackNotifier {
                connection = "PROJECT_EXT_3"
                sendTo = "#profiler2022"
                messageFormat = verboseMessageFormat {
                    addStatusText = true
                    maximumNumberOfChanges = 10
                }
            }
            buildStarted = true
            buildFailedToStart = true
            buildFailed = true
            buildFinishedSuccessfully = true
            firstBuildErrorOccurs = true
            buildProbablyHanging = true
            queuedBuildRequiresApproval = true
        }
    }

    dependencies {
        artifacts(BuildAndPackage) {
            buildRule = lastSuccessful()
            artifactRules = "front.latest.image.version"
        }
    }
})

object BootcampFrontend : GitVcsRoot({
    name = "bootcamp/frontend"
    url = "https://git.it-academy.by/bootcamp/frontend.git"
    branch = "refs/heads/develop"
    branchSpec = """
        +:refs/heads/develop
        -:refs/heads/feature/*
    """.trimIndent()
    authMethod = password {
        password = "credentialsJSON:e97ee6b0-8891-43f6-a362-50f7f7e0edf8"
    }
})
